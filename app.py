# file: app.py (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π)

import gradio as gr
import os
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
from data_preparer import prepare_dataset
from training_manager import tokenize_dataset, run_training
# –í–ê–ñ–ù–û: –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π inference_manager
from inference_manager import get_available_models, get_available_lora_models, run_inference

# --- UI-–±–ª–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ---
def create_generation_tab():
    with gr.Blocks() as generation_block:
        gr.Markdown("## üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ú—É–∑—ã–∫–∏ (PRO)")
        
        with gr.Row():
            base_model_dropdown = gr.Dropdown(label="1. –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å", choices=get_available_models(), scale=3)
            lora_model_dropdown = gr.Dropdown(label="2. LoRA –º–æ–¥–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", choices=get_available_lora_models(), scale=3)
            is_exllamav2_checkbox = gr.Checkbox(label="Exllamav2 –º–æ–¥–µ–ª—å?", value=False, scale=1)
            refresh_models_button = gr.Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª–∏")

        gr.Markdown("---")
        gr.Markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–º–ø—Ç–∞")
        prompt_type_radio = gr.Radio(
            ["–¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç", "–û–¥–∏–Ω–æ—á–Ω—ã–π –∞—É–¥–∏–æ-–ø—Ä–æ–º–ø—Ç", "–î–≤–æ–π–Ω–æ–π –∞—É–¥–∏–æ-–ø—Ä–æ–º–ø—Ç"],
            label="–¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞",
            value="–¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç"
        )
        
        # --- –ë–ª–æ–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ (–≤–∏–¥–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) ---
        with gr.Blocks(visible=True) as text_prompt_group:
            prompt_input = gr.Textbox(label="–¢–µ–∫—Å—Ç", lines=3, placeholder="epic cinematic orchestral music...")

        # --- –ë–ª–æ–∫ –¥–ª—è –û–î–ò–ù–û–ß–ù–û–ì–û –∞—É–¥–∏–æ-–ø—Ä–æ–º–ø—Ç–∞ (—Å–∫—Ä—ã—Ç) ---
        with gr.Blocks(visible=False) as single_audio_group:
            gr.Markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ —Ç–∏–ø. –í—Ç–æ—Ä–æ–π —Ç—Ä–µ–∫ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω —Ç–∏—à–∏–Ω–æ–π.")
            single_audio_upload = gr.Audio(label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ-–ø—Ä–æ–º–ø—Ç", type="filepath")
            single_audio_type_radio = gr.Radio(["–í–æ–∫–∞–ª", "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª"], label="–¢–∏–ø –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ", value="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª")

        # --- –ë–ª–æ–∫ –¥–ª—è –î–í–û–ô–ù–û–ì–û –∞—É–¥–∏–æ-–ø—Ä–æ–º–ø—Ç–∞ (—Å–∫—Ä—ã—Ç) ---
        with gr.Blocks(visible=False) as dual_audio_group:
            gr.Markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–æ—Ä–æ–∂–∫—É —Å –≤–æ–∫–∞–ª–æ–º –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª–æ–º.")
            instrumental_upload = gr.Audio(label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª", type="filepath")
            vocal_upload = gr.Audio(label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–æ–∫–∞–ª", type="filepath")
        
        # --- –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞—É–¥–∏–æ-–ø—Ä–æ–º–ø—Ç–æ–≤ (—Å–∫—Ä—ã—Ç—ã) ---
        with gr.Blocks(visible=False) as audio_timing_group:
            with gr.Row():
                prompt_start_time_input = gr.Number(label="–ù–∞—á–∞–ª–æ –ø—Ä–æ–º–ø—Ç–∞ (—Å–µ–∫)", value=0)
                prompt_end_time_input = gr.Number(label="–ö–æ–Ω–µ—Ü –ø—Ä–æ–º–ø—Ç–∞ (—Å–µ–∫)", value=10)

        # --- –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ---
        with gr.Accordion("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –∫—ç—à–∞", open=False):
            with gr.Row():
                duration_slider = gr.Slider(minimum=5, maximum=300, value=30, step=1, label="–§–∏–Ω–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫)")
                max_new_tokens_slider = gr.Slider(minimum=64, maximum=4096, value=1024, step=64, label="Max New Tokens")
            gr.Markdown("##### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—ç—à–∞")
            with gr.Row():
                stage1_cache_size_input = gr.Number(label="–ö—ç—à Stage 1 (GB)", value=2)
                stage2_cache_size_input = gr.Number(label="–ö—ç—à Stage 2 (GB)", value=2)
            gr.Markdown("##### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Stage 1")
            with gr.Row():
                s1_guidance_scale_slider = gr.Slider(1, 15, 3.5, step=0.1, label="Guidance Scale")
                s1_top_p_slider = gr.Slider(0.1, 1.0, 0.95, step=0.01, label="Top-P")
                s1_temp_slider = gr.Slider(0.1, 1.5, 1.0, step=0.05, label="Temperature")
                s1_rep_penalty_slider = gr.Slider(1.0, 1.5, 1.2, step=0.01, label="Repetition Penalty")

        # --- –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏ –≤—ã–≤–æ–¥ ---
        gr.Markdown("---")
        generate_button = gr.Button("üéπ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º—É–∑—ã–∫—É!", variant="primary", size="lg")
        status_output = gr.Textbox(label="–°—Ç–∞—Ç—É—Å", interactive=False)
        audio_output = gr.Audio(label="–í–∞—à —Ç—Ä–µ–∫", type="filepath")

        # --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π UI ---
        def switch_prompt_ui(prompt_type):
            return {
                text_prompt_group: gr.update(visible=prompt_type == "–¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç"),
                single_audio_group: gr.update(visible=prompt_type == "–û–¥–∏–Ω–æ—á–Ω—ã–π –∞—É–¥–∏–æ-–ø—Ä–æ–º–ø—Ç"),
                dual_audio_group: gr.update(visible=prompt_type == "–î–≤–æ–π–Ω–æ–π –∞—É–¥–∏–æ-–ø—Ä–æ–º–ø—Ç"),
                audio_timing_group: gr.update(visible=prompt_type in ["–û–¥–∏–Ω–æ—á–Ω—ã–π –∞—É–¥–∏–æ-–ø—Ä–æ–º–ø—Ç", "–î–≤–æ–π–Ω–æ–π –∞—É–¥–∏–æ-–ø—Ä–æ–º–ø—Ç"])
            }
        prompt_type_radio.change(fn=switch_prompt_ui, inputs=prompt_type_radio, outputs=[text_prompt_group, single_audio_group, dual_audio_group, audio_timing_group])
        
        # --- –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å –±—ç–∫–µ–Ω–¥–æ–º ---
        refresh_models_button.click(
            fn=lambda: (gr.update(choices=get_available_models()), gr.update(choices=get_available_lora_models())),
            outputs=[base_model_dropdown, lora_model_dropdown]
        )
        generate_button.click(
            fn=run_inference,
            inputs=[
                base_model_dropdown, lora_model_dropdown, is_exllamav2_checkbox,
                stage1_cache_size_input, stage2_cache_size_input,
                prompt_type_radio, prompt_input, single_audio_upload, single_audio_type_radio,
                instrumental_upload, vocal_upload,
                prompt_start_time_input, prompt_end_time_input,
                duration_slider, max_new_tokens_slider,
                s1_guidance_scale_slider, s1_top_p_slider, s1_temp_slider, s1_rep_penalty_slider
            ],
            outputs=[status_output, audio_output]
        )
    return generation_block

# ... (–ö–æ–¥ –¥–ª—è create_finetune_tab() –∏ –∑–∞–ø—É—Å–∫–∞ demo –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

with gr.Blocks(title="YUE Music AI Studio PRO", theme=gr.themes.Soft()) as demo:
    gr.Markdown("# üéπ YUE Music AI Studio (PRO Version)")
    # ...
    with gr.Tabs():
        with gr.TabItem("üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ú—É–∑—ã–∫–∏"):
            create_generation_tab()
        with gr.TabItem("‚öôÔ∏è –î–æ–æ–±—É—á–µ–Ω–∏–µ –ú–æ–¥–µ–ª–∏ (Fine-tuning)"):
            create_finetune_tab() # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤

if __name__ == "__main__":
    # ...
    demo.launch(debug=True, inbrowser=True)